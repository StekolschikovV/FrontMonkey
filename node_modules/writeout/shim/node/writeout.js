/**
 * Writeout a file.
 * @function writeout
 * @param {string} filename - Filename to write.
 * @param {string|Buffer|ReadableStream} content - String content to write.
 * @param {object} [options] - Optional settings.
 * @param {boolean} [options.mkdirp=false] - Make parent directories.
 * @param {boolean} [options.skipIfIdentical=false] - Skip to write if existing content is identical.
 * @param {string} [options.mode='644'] - File permission.
 * @param {boolean} [options.force=false] - Force to write even if existing file is readonly.
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var fs = require('fs');
var path = require('path');
var argx = require('argx');
var mkdirp = require('mkdirp');
var filedel = require('filedel');

var _require = require('./helpers');

var hasDuplicate = _require.hasDuplicate;
var isStream = _require.isStream;

/** @lends writeout */

function writeout(filename, content) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  if (argx(arguments).pop('function')) {
    throw new Error('[writeout] Callback is no more supported. Use promise interface instead.');
  }

  var _options$mkdirp = options.mkdirp;
  var needsMkdirp = _options$mkdirp === undefined ? false : _options$mkdirp;
  var _options$skipIfIdenti = options.skipIfIdentical;
  var skipIfIdentical = _options$skipIfIdenti === undefined ? false : _options$skipIfIdenti;
  var _options$force = options.force;
  var force = _options$force === undefined ? false : _options$force;
  var _options$mode = options.mode;
  var mode = _options$mode === undefined ? '644' : _options$mode;


  var result = { filename: filename };

  return co(_regenerator2.default.mark(function _callee2() {
    var _this = this;

    var skip;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!needsMkdirp) {
              _context2.next = 3;
              break;
            }

            _context2.next = 3;
            return new _promise2.default(function (resolve, reject) {
              return mkdirp(path.dirname(filename), function (err) {
                return err ? reject(err) : resolve();
              });
            });

          case 3:
            if (!skipIfIdentical) {
              _context2.next = 10;
              break;
            }

            _context2.next = 6;
            return hasDuplicate(filename, content);

          case 6:
            skip = _context2.sent;

            if (!skip) {
              _context2.next = 10;
              break;
            }

            result.skipped = true;
            return _context2.abrupt('return', result);

          case 10:
            if (!force) {
              _context2.next = 13;
              break;
            }

            _context2.next = 13;
            return filedel(filename, { force: true });

          case 13:
            if (!isStream(content)) {
              _context2.next = 17;
              break;
            }

            return _context2.delegateYield(_regenerator2.default.mark(function _callee() {
              var write;
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      write = fs.createWriteStream(filename, { mode: mode });
                      _context.next = 3;
                      return new _promise2.default(function (resolve, reject) {
                        content.pipe(write);
                        write.on('close', function () {
                          return resolve();
                        });
                        write.on('error', function (err) {
                          return reject(err);
                        });
                      });

                    case 3:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this);
            })(), 't0', 15);

          case 15:
            _context2.next = 19;
            break;

          case 17:
            _context2.next = 19;
            return new _promise2.default(function (resolve, reject) {
              return fs.writeFile(filename, content, { mode: mode }, function (err) {
                return err ? reject(err) : resolve();
              });
            });

          case 19:

            result.skipped = false;

            // Wait for flush
            _context2.next = 22;
            return new _promise2.default(function (resolve) {
              return process.nextTick(function () {
                return resolve();
              });
            });

          case 22:
            return _context2.abrupt('return', result);

          case 23:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
}

module.exports = writeout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlb3V0LmpzIl0sIm5hbWVzIjpbImNvIiwicmVxdWlyZSIsImZzIiwicGF0aCIsImFyZ3giLCJta2RpcnAiLCJmaWxlZGVsIiwiaGFzRHVwbGljYXRlIiwiaXNTdHJlYW0iLCJ3cml0ZW91dCIsImZpbGVuYW1lIiwiY29udGVudCIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJwb3AiLCJFcnJvciIsIm5lZWRzTWtkaXJwIiwic2tpcElmSWRlbnRpY2FsIiwiZm9yY2UiLCJtb2RlIiwicmVzdWx0IiwicmVzb2x2ZSIsInJlamVjdCIsImRpcm5hbWUiLCJlcnIiLCJza2lwIiwic2tpcHBlZCIsIndyaXRlIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJwaXBlIiwib24iLCJ3cml0ZUZpbGUiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUUsT0FBT0YsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRyxPQUFPSCxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1JLFNBQVNKLFFBQVEsUUFBUixDQUFmO0FBQ0EsSUFBTUssVUFBVUwsUUFBUSxTQUFSLENBQWhCOztlQUNtQ0EsUUFBUSxXQUFSLEM7O0lBQTNCTSxZLFlBQUFBLFk7SUFBY0MsUSxZQUFBQSxROztBQUV0Qjs7QUFDQSxTQUFTQyxRQUFULENBQW1CQyxRQUFuQixFQUE2QkMsT0FBN0IsRUFBb0Q7QUFBQSxNQUFkQyxPQUFjLHlEQUFKLEVBQUk7O0FBQ2xELE1BQUlSLEtBQUtTLFNBQUwsRUFBZ0JDLEdBQWhCLENBQW9CLFVBQXBCLENBQUosRUFBcUM7QUFDbkMsVUFBTSxJQUFJQyxLQUFKLENBQVUsMEVBQVYsQ0FBTjtBQUNEOztBQUhpRCx3QkFVOUNILE9BVjhDLENBTWhEUCxNQU5nRDtBQUFBLE1BTXhDVyxXQU53QyxtQ0FNMUIsS0FOMEI7QUFBQSw4QkFVOUNKLE9BVjhDLENBT2hESyxlQVBnRDtBQUFBLE1BT2hEQSxlQVBnRCx5Q0FPOUIsS0FQOEI7QUFBQSx1QkFVOUNMLE9BVjhDLENBUWhETSxLQVJnRDtBQUFBLE1BUWhEQSxLQVJnRCxrQ0FReEMsS0FSd0M7QUFBQSxzQkFVOUNOLE9BVjhDLENBU2hETyxJQVRnRDtBQUFBLE1BU2hEQSxJQVRnRCxpQ0FTekMsS0FUeUM7OztBQVlsRCxNQUFJQyxTQUFTLEVBQUVWLGtCQUFGLEVBQWI7O0FBRUEsU0FBT1YsOEJBQUc7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBQ0pnQixXQURJO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBRUEsc0JBQVksVUFBQ0ssT0FBRCxFQUFVQyxNQUFWO0FBQUEscUJBQ2hCakIsT0FBT0YsS0FBS29CLE9BQUwsQ0FBYWIsUUFBYixDQUFQLEVBQStCLFVBQUNjLEdBQUQ7QUFBQSx1QkFBU0EsTUFBTUYsT0FBT0UsR0FBUCxDQUFOLEdBQW9CSCxTQUE3QjtBQUFBLGVBQS9CLENBRGdCO0FBQUEsYUFBWixDQUZBOztBQUFBO0FBQUEsaUJBT0pKLGVBUEk7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxtQkFRV1YsYUFBYUcsUUFBYixFQUF1QkMsT0FBdkIsQ0FSWDs7QUFBQTtBQVFGYyxnQkFSRTs7QUFBQSxpQkFTRkEsSUFURTtBQUFBO0FBQUE7QUFBQTs7QUFVSkwsbUJBQU9NLE9BQVAsR0FBaUIsSUFBakI7QUFWSSw4Q0FXR04sTUFYSDs7QUFBQTtBQUFBLGlCQWVKRixLQWZJO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBZ0JBWixRQUFRSSxRQUFSLEVBQWtCLEVBQUVRLE9BQU8sSUFBVCxFQUFsQixDQWhCQTs7QUFBQTtBQUFBLGlCQW1CSlYsU0FBU0csT0FBVCxDQW5CSTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFvQkZnQiwyQkFwQkUsR0FvQk16QixHQUFHMEIsaUJBQUgsQ0FBcUJsQixRQUFyQixFQUErQixFQUFFUyxVQUFGLEVBQS9CLENBcEJOO0FBQUE7QUFBQSw2QkFxQkEsc0JBQVksVUFBQ0UsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3JDWCxnQ0FBUWtCLElBQVIsQ0FBYUYsS0FBYjtBQUNBQSw4QkFBTUcsRUFBTixDQUFTLE9BQVQsRUFBa0I7QUFBQSxpQ0FBTVQsU0FBTjtBQUFBLHlCQUFsQjtBQUNBTSw4QkFBTUcsRUFBTixDQUFTLE9BQVQsRUFBa0IsVUFBQ04sR0FBRDtBQUFBLGlDQUFTRixPQUFPRSxHQUFQLENBQVQ7QUFBQSx5QkFBbEI7QUFDRCx1QkFKSyxDQXJCQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLG1CQTJCQSxzQkFBWSxVQUFDSCxPQUFELEVBQVVDLE1BQVY7QUFBQSxxQkFDaEJwQixHQUFHNkIsU0FBSCxDQUFhckIsUUFBYixFQUF1QkMsT0FBdkIsRUFBZ0MsRUFBRVEsVUFBRixFQUFoQyxFQUEwQyxVQUFDSyxHQUFEO0FBQUEsdUJBQVNBLE1BQU1GLE9BQU9FLEdBQVAsQ0FBTixHQUFvQkgsU0FBN0I7QUFBQSxlQUExQyxDQURnQjtBQUFBLGFBQVosQ0EzQkE7O0FBQUE7O0FBZ0NSRCxtQkFBT00sT0FBUCxHQUFpQixLQUFqQjs7QUFFQTtBQWxDUTtBQUFBLG1CQW1DRixzQkFBWSxVQUFDTCxPQUFEO0FBQUEscUJBQ2hCVyxRQUFRQyxRQUFSLENBQWlCO0FBQUEsdUJBQU1aLFNBQU47QUFBQSxlQUFqQixDQURnQjtBQUFBLGFBQVosQ0FuQ0U7O0FBQUE7QUFBQSw4Q0F1Q0RELE1BdkNDOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUgsRUFBUDtBQXlDRDs7QUFFRGMsT0FBT0MsT0FBUCxHQUFpQjFCLFFBQWpCIiwiZmlsZSI6IndyaXRlb3V0LmpzIiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV3JpdGVvdXQgYSBmaWxlLlxuICogQGZ1bmN0aW9uIHdyaXRlb3V0XG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSBGaWxlbmFtZSB0byB3cml0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcnxSZWFkYWJsZVN0cmVhbX0gY29udGVudCAtIFN0cmluZyBjb250ZW50IHRvIHdyaXRlLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5ta2RpcnA9ZmFsc2VdIC0gTWFrZSBwYXJlbnQgZGlyZWN0b3JpZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNraXBJZklkZW50aWNhbD1mYWxzZV0gLSBTa2lwIHRvIHdyaXRlIGlmIGV4aXN0aW5nIGNvbnRlbnQgaXMgaWRlbnRpY2FsLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1vZGU9JzY0NCddIC0gRmlsZSBwZXJtaXNzaW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mb3JjZT1mYWxzZV0gLSBGb3JjZSB0byB3cml0ZSBldmVuIGlmIGV4aXN0aW5nIGZpbGUgaXMgcmVhZG9ubHkuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgY28gPSByZXF1aXJlKCdjbycpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IGFyZ3ggPSByZXF1aXJlKCdhcmd4JylcbmNvbnN0IG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpXG5jb25zdCBmaWxlZGVsID0gcmVxdWlyZSgnZmlsZWRlbCcpXG5jb25zdCB7IGhhc0R1cGxpY2F0ZSwgaXNTdHJlYW0gfSA9IHJlcXVpcmUoJy4vaGVscGVycycpXG5cbi8qKiBAbGVuZHMgd3JpdGVvdXQgKi9cbmZ1bmN0aW9uIHdyaXRlb3V0IChmaWxlbmFtZSwgY29udGVudCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChhcmd4KGFyZ3VtZW50cykucG9wKCdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbd3JpdGVvdXRdIENhbGxiYWNrIGlzIG5vIG1vcmUgc3VwcG9ydGVkLiBVc2UgcHJvbWlzZSBpbnRlcmZhY2UgaW5zdGVhZC4nKVxuICB9XG5cbiAgbGV0IHtcbiAgICBta2RpcnA6IG5lZWRzTWtkaXJwID0gZmFsc2UsXG4gICAgc2tpcElmSWRlbnRpY2FsID0gZmFsc2UsXG4gICAgZm9yY2UgPSBmYWxzZSxcbiAgICBtb2RlID0gJzY0NCdcbiAgfSA9IG9wdGlvbnNcblxuICBsZXQgcmVzdWx0ID0geyBmaWxlbmFtZSB9XG5cbiAgcmV0dXJuIGNvKGZ1bmN0aW9uICogKCkge1xuICAgIGlmIChuZWVkc01rZGlycCkge1xuICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgbWtkaXJwKHBhdGguZGlybmFtZShmaWxlbmFtZSksIChlcnIpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKVxuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChza2lwSWZJZGVudGljYWwpIHtcbiAgICAgIGxldCBza2lwID0geWllbGQgaGFzRHVwbGljYXRlKGZpbGVuYW1lLCBjb250ZW50KVxuICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgcmVzdWx0LnNraXBwZWQgPSB0cnVlXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHlpZWxkIGZpbGVkZWwoZmlsZW5hbWUsIHsgZm9yY2U6IHRydWUgfSlcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJlYW0oY29udGVudCkpIHtcbiAgICAgIGxldCB3cml0ZSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGZpbGVuYW1lLCB7IG1vZGUgfSlcbiAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29udGVudC5waXBlKHdyaXRlKVxuICAgICAgICB3cml0ZS5vbignY2xvc2UnLCAoKSA9PiByZXNvbHZlKCkpXG4gICAgICAgIHdyaXRlLm9uKCdlcnJvcicsIChlcnIpID0+IHJlamVjdChlcnIpKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVuYW1lLCBjb250ZW50LCB7IG1vZGUgfSwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmVzdWx0LnNraXBwZWQgPSBmYWxzZVxuXG4gICAgLy8gV2FpdCBmb3IgZmx1c2hcbiAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gcmVzb2x2ZSgpKVxuICAgIClcblxuICAgIHJldHVybiByZXN1bHRcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3cml0ZW91dFxuIl19